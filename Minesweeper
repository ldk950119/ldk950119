import pygame
import sys
import random
import time

pygame.init()
pygame.display.set_caption("My Own Minesweeper")

screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
background_color = (255, 255, 255)
screen.fill(background_color)

game_state = 'game_ready'
game_font = pygame.font.Font(None, 64)
game_ready_text_surface = game_font.render('Press Any Key to Start', True, (255, 0, 0))
screen.blit(game_ready_text_surface, (screen.get_width() // 2 - game_ready_text_surface.get_width() // 2,
                                      screen.get_height() // 2 - game_ready_text_surface.get_height() // 2))
pygame.display.update()


def game_settings():
    screen.fill(background_color)
    global rect_size
    rect_size = 40
    pygame.draw.rect(screen, (121, 125, 127), (0, 0, rect_size * 10, rect_size * 10))
    pygame.draw.rect(screen, (121, 125, 127), (0, 0, rect_size * 10, rect_size * 10))
    for x in range(0, 10):
        for y in range(0, 10):
            pygame.draw.rect(screen, (0, 0, 0),
                             (x * rect_size, y * rect_size, rect_size, rect_size), 2)

    font_total_mine = pygame.font.Font(None, 64)
    total_mine_text_surface = font_total_mine.render(str(10), True, (0, 0, 0))
    screen.blit(total_mine_text_surface, (500, 100))
    pygame.display.update()


def reset_game():
    global Game, board, mine_count_board, mine
    Game = GameBoard()
    Game.grid_with_mine()
    Game.grid_with_mine_count()
    board = Game.grid
    mine_count_board = Game.mine_count_grid
    mine = Mine(board, mine_count_board)


class GameBoard:
    def __init__(self, row=10, col=10, num_mine=10):
        self.row = row
        self.col = col
        self.num_mine = num_mine
        self.grid = [[0 for _ in range(10)] for _ in range(10)]
        self.mine_count_grid = [[0 for _ in range(10)] for _ in range(10)]
        self.empty_cell = row * col - num_mine

    def grid_with_mine(self):
        mine_pos = [[random.randint(0, 9), random.randint(0, 9)]]

        while len(mine_pos) < self.num_mine:
            dup_mine_pos = False
            mine_row = random.randint(0, 9)
            mine_col = random.randint(0, 9)
            new_mine_pos = [mine_row, mine_col]
            for i in range(len(mine_pos)):
                if mine_pos[i] == new_mine_pos:
                    dup_mine_pos = True
                    break
            if not dup_mine_pos:
                mine_pos.append(new_mine_pos)

        for pos in mine_pos:
            row, col = pos
            self.grid[row][col] = 1

    def grid_with_mine_count(self):
        for x in range(0, len(self.grid)):
            for y in range(0, len(self.grid[x])):
                mine_count = 0
                for i in range(max(0, x - 1), min(self.row, x + 2)):
                    for j in range(max(0, y - 1), min(self.col, y + 2)):
                        if self.grid[i][j] == 1:
                            mine_count += 1
                self.mine_count_grid[x][y] = mine_count


class Mine:
    def __init__(self, gameboard, gameboard_with_mine_count):
        self.gameboard = gameboard
        self.gameboard_with_mine_count = gameboard_with_mine_count
        self.reveal = [[0 for _ in range(10)] for _ in range(10)]
        self.flag = [[0 for _ in range(10)] for _ in range(10)]
        self.game_over = False
        self.empty_cell_revealed = 0
        self.flagged_mine = 0
        self.font = pygame.font.SysFont("Arial", 30)

    def reveal_mine(self, cell_x, cell_y):
        try:
            if self.reveal[cell_y][cell_x] == 1 or self.flag[cell_y][cell_x] == 1:
                return

            self.reveal[cell_y][cell_x] = 1

            if self.gameboard[cell_y][cell_x] == 1:
                pygame.draw.rect(screen, (229, 231, 233),
                                 (cell_x * rect_size + 1, cell_y * rect_size + 1, rect_size - 2,
                                  rect_size - 2))
                pygame.draw.line(screen, (0, 0, 0),
                                 (cell_x * rect_size + 1, cell_y * rect_size + 1),
                                 ((cell_x + 1) * rect_size, (cell_y + 1) * rect_size),
                                 2)
                pygame.draw.line(screen, (0, 0, 0),
                                 ((cell_x + 1) * rect_size, cell_y * rect_size),
                                 (cell_x * rect_size - 1, (cell_y + 1) * rect_size - 1),
                                 2)
                self.game_over = True
            elif self.gameboard_with_mine_count[cell_y][cell_x] != 0:
                text = str(self.gameboard_with_mine_count[cell_y][cell_x])
                text_surface = self.font.render(text, True, (176, 58, 46))
                pygame.draw.rect(screen, (229, 231, 233),
                                 (cell_x * rect_size + 1, cell_y * rect_size + 1, rect_size - 2,
                                  rect_size - 2))
                screen.blit(text_surface, (cell_x * rect_size + rect_size - 30,
                                           cell_y * rect_size))
                self.empty_cell_revealed += 1
            else:
                self.empty_cell_revealed += 1
                pygame.draw.rect(screen, (229, 231, 233),
                                 (cell_x * rect_size + 1, cell_y * rect_size + 1, rect_size - 2,
                                  rect_size - 2))
                print(str(cell_y) + " " + str(cell_x) + " empty!")
                for i in range(max(0, cell_x - 1), min(cell_x + 2, len(self.gameboard))):
                    for j in range(max(0, cell_y - 1), min(cell_y + 2, len(self.gameboard[i]))):
                        self.reveal_mine(i, j)

            pygame.display.update()
        except:
            pass

    def flag_mine(self, cell_x, cell_y):
        if self.flag[cell_y][cell_x] == 0:
            if self.reveal[cell_y][cell_x] != 1:
                pygame.draw.line(screen, (255, 0, 0),
                                 (cell_x * rect_size + 1, cell_y * rect_size + 1),
                                 ((cell_x + 1) * rect_size, (cell_y + 1) * rect_size),
                                 2)
                pygame.draw.line(screen, (255, 0, 0),
                                 ((cell_x + 1) * rect_size, cell_y * rect_size),
                                 (cell_x * rect_size - 1, (cell_y + 1) * rect_size - 1),
                                 2)
                pygame.display.update()
                self.flag[cell_y][cell_x] = 1
                self.flagged_mine += 1
                print(self.flagged_mine)
        elif self.flag[cell_y][cell_x] == 1:
            pygame.draw.rect(screen, (121, 125, 127),
                             (cell_x * rect_size + 1, cell_y * rect_size + 1, rect_size - 2, rect_size - 2))
            pygame.display.update()
            self.flag[cell_y][cell_x] = 0
            self.flagged_mine -= 1
            print(self.flagged_mine)


def game_loop():
    global game_state

    GameStatus = True
    while GameStatus:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN and game_state == 'game_ready':
                game_settings()
                game_state = 'playing'
                time = 0

            if game_state == 'playing':
                font_time = pygame.font.Font(None, 64)
                pygame.draw.rect(screen, (255, 255, 255),
                                 (500, 200, 64, 64))
                time_text_surface = font_time.render(str(int(pygame.time.get_ticks() // 1000 - time)), True,
                                                     (0, 0, 0))
                screen.blit(time_text_surface, (500, 200))
                if event.type == pygame.MOUSEBUTTONDOWN:
                    mouse_x, mouse_y = pygame.mouse.get_pos()
                    cell_row = mouse_x // rect_size
                    cell_col = mouse_y // rect_size
                    if event.button == 1:  # left mouse click
                        mine.reveal_mine(cell_row, cell_col)
                        print(game_state)
                        if mine.game_over:
                            game_state = 'game_over'
                    elif event.button == 3:
                        mine.flag_mine(cell_row, cell_col)
                        font_rest_mine = pygame.font.Font(None, 64)
                        pygame.draw.rect(screen, (255, 255, 255),
                                         (500, 100, 64, 64))
                        rest_mine_text_surface = font_rest_mine.render(str(Game.num_mine - mine.flagged_mine), True,
                                                                       (0, 0, 0))
                        screen.blit(rest_mine_text_surface, (500, 100))
            elif game_state == 'game_over' or game_state == 'game_win':
                if game_state == 'game_over':
                    game_over_text_surface = game_font.render('Game Over', True, (255, 0, 0))
                    screen.blit(game_over_text_surface,
                                (screen.get_width() // 2 - game_over_text_surface.get_width() // 2,
                                 screen.get_height() // 2 - game_over_text_surface.get_height() // 2))
                elif game_state == 'game_win':
                    game_win_text_surface = game_font.render('Game Win', True, (255, 0, 0))
                    screen.blit(game_win_text_surface,
                                (screen.get_width() // 2 - game_win_text_surface.get_width() // 2,
                                 screen.get_height() // 2 - game_win_text_surface.get_height() // 2))

                keys = pygame.key.get_pressed()
                if keys[pygame.K_r]:
                    game_settings()
                    reset_game()
                    game_state = 'playing'

        if mine.empty_cell_revealed == Game.empty_cell:
            game_state = 'game_win'

        pygame.display.update()


print(GameBoard)
reset_game()

game_loop()
